"use strict";(self.webpackChunkleseq_docs=self.webpackChunkleseq_docs||[]).push([[327],{876:function(e,t,a){a.d(t,{Zo:function(){return o},kt:function(){return s}});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),m=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},o=function(e){var t=m(e.components);return n.createElement(d.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),u=m(a),s=r,N=u["".concat(d,".").concat(s)]||u[s]||k[s]||l;return a?n.createElement(N,p(p({ref:t},o),{},{components:a})):n.createElement(N,p({ref:t},o))}));function s(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,p=new Array(l);p[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var m=2;m<l;m++)p[m]=a[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},925:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return d},metadata:function(){return m},toc:function(){return o},default:function(){return u}});var n=a(7896),r=a(1461),l=(a(2784),a(876)),p=["components"],i={id:"api-operators",title:"leseq",slug:"/api/operators/",sidebar_label:"operators",sidebar_position:.5,custom_edit_url:null,hide_title:!0},d=void 0,m={unversionedId:"api/operators/api-operators",id:"api/operators/api-operators",title:"leseq",description:"Operators",source:"@site/docs/api/operators/index.md",sourceDirName:"api/operators",slug:"/api/operators/",permalink:"/leseq/api/operators/",editUrl:null,tags:[],version:"current",sidebarPosition:.5,frontMatter:{id:"api-operators",title:"leseq",slug:"/api/operators/",sidebar_label:"operators",sidebar_position:.5,custom_edit_url:null,hide_title:!0},sidebar:"mainSidebar",previous:{title:"generators",permalink:"/leseq/api/generators/"},next:{title:"values",permalink:"/leseq/api/values/"}},o=[{value:"Operators",id:"operators",children:[{value:"chunk",id:"chunk",children:[{value:"Type parameters",id:"type-parameters",children:[],level:4},{value:"Parameters",id:"parameters",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"Defined in",id:"defined-in",children:[],level:4}],level:3},{value:"concat",id:"concat",children:[{value:"Type parameters",id:"type-parameters-1",children:[],level:4},{value:"Parameters",id:"parameters-1",children:[],level:4},{value:"Returns",id:"returns-1",children:[],level:4},{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"concatValue",id:"concatvalue",children:[{value:"Type parameters",id:"type-parameters-2",children:[],level:4},{value:"Parameters",id:"parameters-2",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3},{value:"difference",id:"difference",children:[{value:"Type parameters",id:"type-parameters-3",children:[],level:4},{value:"Parameters",id:"parameters-3",children:[],level:4},{value:"Returns",id:"returns-3",children:[],level:4},{value:"Defined in",id:"defined-in-3",children:[],level:4}],level:3},{value:"filter",id:"filter",children:[{value:"Type parameters",id:"type-parameters-4",children:[],level:4},{value:"Parameters",id:"parameters-4",children:[],level:4},{value:"Returns",id:"returns-4",children:[],level:4},{value:"Defined in",id:"defined-in-4",children:[],level:4}],level:3},{value:"flatten",id:"flatten",children:[{value:"Type parameters",id:"type-parameters-5",children:[],level:4},{value:"Parameters",id:"parameters-5",children:[],level:4},{value:"Returns",id:"returns-5",children:[],level:4},{value:"Defined in",id:"defined-in-5",children:[],level:4}],level:3},{value:"groupBy",id:"groupby",children:[{value:"Type parameters",id:"type-parameters-6",children:[],level:4},{value:"Parameters",id:"parameters-6",children:[],level:4},{value:"Returns",id:"returns-6",children:[{value:"Parameters",id:"parameters-7",children:[],level:5},{value:"Returns",id:"returns-7",children:[],level:5}],level:4},{value:"Defined in",id:"defined-in-6",children:[],level:4}],level:3},{value:"intersect",id:"intersect",children:[{value:"Type parameters",id:"type-parameters-7",children:[],level:4},{value:"Parameters",id:"parameters-8",children:[],level:4},{value:"Returns",id:"returns-8",children:[],level:4},{value:"Defined in",id:"defined-in-7",children:[],level:4}],level:3},{value:"map",id:"map",children:[{value:"Type parameters",id:"type-parameters-8",children:[],level:4},{value:"Parameters",id:"parameters-9",children:[],level:4},{value:"Returns",id:"returns-9",children:[],level:4},{value:"Defined in",id:"defined-in-8",children:[],level:4}],level:3},{value:"orderBy",id:"orderby",children:[{value:"Type parameters",id:"type-parameters-9",children:[],level:4},{value:"Parameters",id:"parameters-10",children:[],level:4},{value:"Returns",id:"returns-10",children:[],level:4},{value:"Defined in",id:"defined-in-9",children:[],level:4}],level:3},{value:"reverse",id:"reverse",children:[{value:"Type parameters",id:"type-parameters-10",children:[],level:4},{value:"Returns",id:"returns-11",children:[],level:4},{value:"Defined in",id:"defined-in-10",children:[],level:4}],level:3},{value:"scan",id:"scan",children:[{value:"Type parameters",id:"type-parameters-11",children:[],level:4},{value:"Parameters",id:"parameters-11",children:[],level:4},{value:"Returns",id:"returns-12",children:[],level:4},{value:"Defined in",id:"defined-in-11",children:[],level:4}],level:3},{value:"skip",id:"skip",children:[{value:"Type parameters",id:"type-parameters-12",children:[],level:4},{value:"Parameters",id:"parameters-12",children:[],level:4},{value:"Returns",id:"returns-13",children:[],level:4},{value:"Defined in",id:"defined-in-12",children:[],level:4}],level:3},{value:"skipWhile",id:"skipwhile",children:[{value:"Type parameters",id:"type-parameters-13",children:[],level:4},{value:"Parameters",id:"parameters-13",children:[],level:4},{value:"Returns",id:"returns-14",children:[],level:4},{value:"Defined in",id:"defined-in-13",children:[],level:4}],level:3},{value:"take",id:"take",children:[{value:"Type parameters",id:"type-parameters-14",children:[],level:4},{value:"Parameters",id:"parameters-14",children:[],level:4},{value:"Returns",id:"returns-15",children:[],level:4},{value:"Defined in",id:"defined-in-14",children:[],level:4}],level:3},{value:"takeWhile",id:"takewhile",children:[{value:"Type parameters",id:"type-parameters-15",children:[],level:4},{value:"Parameters",id:"parameters-15",children:[],level:4},{value:"Returns",id:"returns-16",children:[],level:4},{value:"Defined in",id:"defined-in-15",children:[],level:4}],level:3},{value:"tap",id:"tap",children:[{value:"Type parameters",id:"type-parameters-16",children:[],level:4},{value:"Parameters",id:"parameters-16",children:[],level:4},{value:"Returns",id:"returns-17",children:[],level:4},{value:"Defined in",id:"defined-in-16",children:[],level:4}],level:3},{value:"union",id:"union",children:[{value:"Type parameters",id:"type-parameters-17",children:[],level:4},{value:"Parameters",id:"parameters-17",children:[],level:4},{value:"Returns",id:"returns-18",children:[],level:4},{value:"Defined in",id:"defined-in-17",children:[],level:4}],level:3},{value:"uniq",id:"uniq",children:[{value:"Type parameters",id:"type-parameters-18",children:[],level:4},{value:"Parameters",id:"parameters-18",children:[],level:4},{value:"Returns",id:"returns-19",children:[],level:4},{value:"Defined in",id:"defined-in-18",children:[],level:4}],level:3}],level:2}],k={toc:o};function u(e){var t=e.components,a=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"operators"},"Operators"),(0,l.kt)("h3",{id:"chunk"},"chunk"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"chunk"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"size"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,l.kt)("p",null,"Returns a sequence divided into array of the specified size."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5, 6, 7]).pipe(chunk(2)).toArray();\n//result: [[1,2],[3,4],[5,6],[7]]\n")),(0,l.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"size")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Length of elements per array.")))),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/chunk.ts#L16"},"chunk.ts:16")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"concat"},"concat"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"concat"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"target"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a sequence in which the current sequence and the specified sequence are concatenated."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2]).pipe(concat([3,4])).toArray();\n//result: [1,2,3,4]\n")),(0,l.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"target")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Sequence to be concatenated.")))),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/concat.ts#L16"},"concat.ts:16")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"concatvalue"},"concatValue"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"concatValue"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"target"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns the sequence to which the specified value is added."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2]).pipe(concatValue(3)).toArray();\n//result: [1,2,3]\n")),(0,l.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"target")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Element you want to add to the sequence.")))),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/concatValue.ts#L16"},"concatValue.ts:16")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"difference"},"difference"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"difference"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"removeDuplicate?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns the sequence that is the difference set between the current sequence and the specified sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = from([1, 2, 3, 6, 6]).pipe(difference([2,3,4,5])).toArray();\n//result1: [1,6]\n\nconst result2 = from([1, 2, 3, 6, 6]).pipe(difference([2,3,4,5],i => i, false)).toArray();\n//result2: [1,6,6]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result3 = from(source).pipe(\n  difference(\n    target,\n    i => i.groupKey,\n    true,\n    one => one.mainKey + one.subKey\n  )\n).toArray();\n\n// result3: [\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"}\n// ]\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," For more information on ",(0,l.kt)("em",{parentName:"p"},"keySelector")," and ",(0,l.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,l.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," The implementation of ",(0,l.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,l.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,l.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"target")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality..")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"removeDuplicate")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("em",{parentName:"td"},"removeDuplicate")," is set to true, duplicates will be removed; default is true.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,l.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/difference.ts#L60"},"difference.ts:60")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"filter"},"filter"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"filter"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a sequence that has been filtered by the specified condition."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(filter(i => i % 2 == 0)).toArray();\n//result: [2,4]\n")),(0,l.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"predicate")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Conditional functions for filtering.")))),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/filter.ts#L16"},"filter.ts:16")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"flatten"},"flatten"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"flatten"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TResult"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,l.kt)("p",null,"Returns a flattened sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([[1,2],[3,4]]).pipe(flatten(i => i)).toArray();\n\n//result1: [1,2,3,4]\n\nconst result2 = from([\n   {values:[1,2]},\n   {values:[3,4]}\n ]).pipe(\n   flatten(i => i.values)\n ).toArray();\n\n//result2: [1,2,3,4]\n")),(0,l.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TResult")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Result element type.")))),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"func")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"TResult"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A function that takes an element of a sequence and returns it in an Iterable form.")))),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/flatten.ts#L27"},"flatten.ts:27")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"groupby"},"groupBy"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"groupBy"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TValue"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"keySelector"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"elementSelector?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): (",(0,l.kt)("inlineCode",{parentName:"p"},"source"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Seq"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">",") => ",(0,l.kt)("inlineCode",{parentName:"p"},"Gen"),"<{ ",(0,l.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"values"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"TValue"),"[]  }",">"),(0,l.kt)("p",null,"Returns a sequence grouped by a specified key."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const source1 = [\n  {groupKey: 1, value: "test1"},\n  {groupKey: 3, value: "test2"},\n  {groupKey: 1, value: "test3"},\n  {groupKey: 1, value: "test4"},\n  {groupKey: 3, value: "test5"},\n  {groupKey: 2, value: "test6"}\n]\n\nconst result1 = from(source1).pipe(groupBy(one => one.groupKey),).toArray();\n\n// result1: [\n//   {key: 1, values: [\n//     {groupKey: 1, value: "test1"},\n//     {groupKey: 1, value: "test3"},\n//     {groupKey: 1, value: "test4"}\n//   ]},\n//   {key: 3, values: [\n//     {groupKey: 3, value: "test2"},\n//     {groupKey: 3, value: "test5"}\n//   ]},\n//   {key: 2, values: [\n//     {groupKey: 2, value: "test6"}\n//   ]}\n// ]\n\nconst source2 = [\n  {groupKey: {key: 1}, value: "test1"},\n  {groupKey: {key: 2}, value: "test2"},\n  {groupKey: {key: 1}, value: "test3"},\n  {groupKey: {key: 1}, value: "test4"},\n]\n\nconst result2 = from(source2).pipe(groupBy(one => one.groupKey,one => one.value,k => k.key),).toArray();\n\n// result2: [\n//   {key: {key: 1}, values: ["test1","test3","test4"]},\n//   {key: {key: 2}, values: ["test2"]}\n// ];\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," For more information on ",(0,l.kt)("em",{parentName:"p"},"keySelector")," and ",(0,l.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,l.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," The implementation of ",(0,l.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,l.kt)("h4",{id:"type-parameters-6"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,l.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"key type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type that will be enumerated in the Value property of the grouped result.")))),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality..")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"elementSelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Function to return the object to be enumerated in the Value property of the grouped result.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,l.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fn")),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("p",null,"\u25b8 (",(0,l.kt)("inlineCode",{parentName:"p"},"source"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Gen"),"<{ ",(0,l.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"values"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"TValue"),"[]  }",">"),(0,l.kt)("h5",{id:"parameters-7"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"source")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Seq"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,l.kt)("h5",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Gen"),"<{ ",(0,l.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"values"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"TValue"),"[]  }",">"),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/groupBy.ts#L69"},"groupBy.ts:69")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"intersect"},"intersect"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"intersect"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a sequence that is the product set of the current sequence and the specified sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = from([1, 2, 3]).pipe(intersect([2,3,4,5])).toArray();\n//result1: [2,3]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result2 = from(source).pipe(\n  intersect(\n    target,\n    i => i.groupKey,\n    one => one.mainKey + one.subKey\n  )\n).toArray();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"}\n// ]\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," For more information on ",(0,l.kt)("em",{parentName:"p"},"keySelector")," and ",(0,l.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,l.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," The implementation of ",(0,l.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,l.kt)("h4",{id:"type-parameters-7"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,l.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"target")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,l.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/intersect.ts#L53"},"intersect.ts:53")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"map"},"map"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"map"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TResult"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,l.kt)("p",null,"Returns the sequence in which each element has been transformed by the specified transformation function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(map(i => i * i)).toArray();\n//result: [1,4,9,16,25]\n")),(0,l.kt)("h4",{id:"type-parameters-8"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TResult")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Transformed element type.")))),(0,l.kt)("h4",{id:"parameters-9"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"func")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TResult")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Transform function.")))),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/map.ts#L17"},"map.ts:17")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"orderby"},"orderBy"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"orderBy"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"keySelector"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"sortType?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"compareFunction?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a sequence sorted by a specified key."),(0,l.kt)("p",null,"Internally, it uses ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"},"Array.sort()"),", and its function is basically the same as Array.sort(), except that it is given a ",(0,l.kt)("em",{parentName:"p"},"compareFunction")," by default."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([4,1,2,5,3]).pipe(\n  orderBy(i => i, 'asc')\n).toArray();\n\n//result1: [1,2,3,4,5]\n\nconst originalCompareFunction = (a: number, b:number) => {\n  if(a % 2 < b % 2) return - 1;\n  if(a % 2 > b % 2) return 1;\n  return 0;\n}\n\nconst result2 = from([4,1,5,3,2]).pipe(\n  orderBy(i => i, 'asc', originalCompareFunction)\n).toArray();\n\n//result2: [4,2,1,5,3]\n")),(0,l.kt)("p",null,"Also, the implementation of the default ",(0,l.kt)("em",{parentName:"p"},"compareFunction")," is as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const defaultSortFunction = (a: any, b: any) => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n")),(0,l.kt)("h4",{id:"type-parameters-9"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,l.kt)("h4",{id:"parameters-10"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Function to return sort key")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"sortType")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"SortType")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"'asc'")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("em",{parentName:"td"},"'asc'")," or ",(0,l.kt)("em",{parentName:"td"},"'desc'"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"compareFunction")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"b"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defaultCompareFunction")),(0,l.kt)("td",{parentName:"tr",align:"left"},"See ",(0,l.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"},"Array.sort()")," for more information.")))),(0,l.kt)("h4",{id:"returns-10"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/orderBy.ts#L48"},"orderBy.ts:48")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"reverse"},"reverse"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"reverse"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a sequence in reverse order of the current sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(reverse()).toArray();\n//result: [5,4,3,2,1]\n")),(0,l.kt)("h4",{id:"type-parameters-10"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"returns-11"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/reverse.ts#L15"},"reverse.ts:15")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"scan"},"scan"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"scan"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"seed"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">"),(0,l.kt)("p",null,"Returns the resulting sequence after applying the aggregate function to the elements of the current sequence.\nThe difference from ",(0,l.kt)("a",{parentName:"p",href:"/api/values/#reduce"},"reduce()")," is that each time the aggregate function is applied, the intermediate steps are also enumerated."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const output = from([1, 2, 3, 4, 5]).pipe(\n  scan(100, (acc, i) => acc + i)\n).toArray();\n\n//result: [101, 103, 106, 110, 115]\n")),(0,l.kt)("h4",{id:"type-parameters-11"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type returned by the aggregate function.")))),(0,l.kt)("h4",{id:"parameters-11"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"seed")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,l.kt)("td",{parentName:"tr",align:"left"},"This is the initial value for aggregation.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"func")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"previous"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"TAccumulate"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"current"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Aggregate function.")))),(0,l.kt)("h4",{id:"returns-12"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/scan.ts#L22"},"scan.ts:22")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"skip"},"skip"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"skip"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"count"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns the sequence with the specified number of skips."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = range(1,10).pipe(\n  skip(3)\n).toArray()\n\n//result: [4,5,6,7,8,9,10]\n")),(0,l.kt)("h4",{id:"type-parameters-12"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters-12"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"count")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of pieces to skip.")))),(0,l.kt)("h4",{id:"returns-13"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/skip.ts#L19"},"skip.ts:19")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"skipwhile"},"skipWhile"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"skipWhile"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns the sequence of elements skipped while matching the condition."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = range(1,10).pipe(\n  skipWhile(i => i < 8)\n).toArray()\n\n//result: [8,9,10]\n")),(0,l.kt)("h4",{id:"type-parameters-13"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters-13"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"predicate")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Condition to skip enumeration.")))),(0,l.kt)("h4",{id:"returns-14"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/skipWhile.ts#L19"},"skipWhile.ts:19")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"take"},"take"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"take"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"count"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a sequence that enumerates the specified number of items."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = range(1,10).pipe(\n  take(3)\n).toArray()\n\n//result: [1,2,3]\n")),(0,l.kt)("h4",{id:"type-parameters-14"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters-14"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"count")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number to enumerate.")))),(0,l.kt)("h4",{id:"returns-15"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/take.ts#L19"},"take.ts:19")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"takewhile"},"takeWhile"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"takeWhile"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a sequence to be enumerated only while the condition is matched."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = range(1,10).pipe(\n  takeWhile(i => i < 5)\n).toArray()\n\n//result: [1,2,3,4]\n")),(0,l.kt)("h4",{id:"type-parameters-15"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters-15"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"predicate")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Condition.")))),(0,l.kt)("h4",{id:"returns-16"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/takeWhile.ts#L19"},"takeWhile.ts:19")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tap"},"tap"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"tap"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Run side effects. The returning sequence is the same as the current one."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1,2,3]).pipe(\n  tap(i => console.log(i * i))\n).toArray();\n\n//result: [1,2,3]\n\n//console:\n// 1\n// 4\n// 9\n")),(0,l.kt)("h4",{id:"type-parameters-16"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,l.kt)("h4",{id:"parameters-16"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"func")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Side effects to perform")))),(0,l.kt)("h4",{id:"returns-17"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/tap.ts#L23"},"tap.ts:23")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"union"},"union"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"union"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a sequence that is the union set of the current sequence and the specified sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = from([1, 2, 3]).pipe(union([2,3,4,5])).toArray();\n//result1: [1,2,3,4,5]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result2 = from(source).pipe(\n  union(\n    target,\n    i => i.groupKey,\n    one => one.mainKey + one.subKey\n  )\n).toArray();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"},\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"},\n//   {"groupKey":{"mainKey":2,"subKey":"e"},"value":"test2"}\n// ]\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," For more information on ",(0,l.kt)("em",{parentName:"p"},"keySelector")," and ",(0,l.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,l.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," The implementation of ",(0,l.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,l.kt)("h4",{id:"type-parameters-17"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,l.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,l.kt)("h4",{id:"parameters-17"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"target")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,l.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,l.kt)("h4",{id:"returns-18"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/union.ts#L55"},"union.ts:55")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"uniq"},"uniq"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"uniq"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Returns a deduplicated sequence."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = from([1, 2, 3]).pipe(uniq([1,1,3,2,4,4,4,1,5])).toArray();\n//result1: [1,3,2,4,5]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst result2 = from(source).pipe(\n  uniq(\n    i => i.groupKey,\n    one => one.mainKey + one.subKey\n  )\n).toArray();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"},\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"},\n// ]\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," For more information on ",(0,l.kt)("em",{parentName:"p"},"keySelector")," and ",(0,l.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,l.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"remarks"))," The implementation of ",(0,l.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,l.kt)("h4",{id:"type-parameters-18"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,l.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,l.kt)("h4",{id:"parameters-18"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,l.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,l.kt)("h4",{id:"returns-19"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,l.kt)("p",null,"Operator function."),(0,l.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/a1b6a38/packages/leseq/src/operators/uniq.ts#L47"},"uniq.ts:47")))}u.isMDXComponent=!0}}]);