"use strict";(self.webpackChunkleseq_docs=self.webpackChunkleseq_docs||[]).push([[81],{876:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return c}});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8795:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return c}});var n=a(7896),r=a(1461),i=(a(2784),a(876)),l=["components"],o={toc:[{value:"Predefined Generators",id:"predefined-generators",children:[],level:2},{value:"Predefined Operators",id:"predefined-operators",children:[],level:2},{value:"Predefined Values",id:"predefined-values",children:[],level:2}]};function s(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://badge.fury.io/js/leseq"},(0,i.kt)("img",{parentName:"a",src:"https://badge.fury.io/js/leseq.svg",alt:"npm version"}))),(0,i.kt)("p",null,"Lazy evaluation list with high tree-shaking affinity and easy customization."),(0,i.kt)("h1",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\ud83c\udf81 ",(0,i.kt)("strong",{parentName:"li"},"Lazy Evaluation"),": The collection is enumerated only as far as it needs to be, and never more than once."),(0,i.kt)("li",{parentName:"ul"},"\ud83c\udf84 ",(0,i.kt)("strong",{parentName:"li"},"Tree-Shakeable"),": Only the features you use will be bundled."),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udcce ",(0,i.kt)("strong",{parentName:"li"},"Easy-Customization"),": You can easily create the functions you need by yourself. ",(0,i.kt)("a",{parentName:"li",href:"https://ugaya40.github.io/leseq/create/"},"In this way.")),(0,i.kt)("li",{parentName:"ul"},"\ud83d\uddc2 ",(0,i.kt)("strong",{parentName:"li"},"Rxjs-like Syntax"),": To achieve tree-shaking, we use an ",(0,i.kt)("a",{parentName:"li",href:"https://rxjs.dev/"},"rxjs"),"-like syntax."),(0,i.kt)("li",{parentName:"ul"},"\u2705 ",(0,i.kt)("strong",{parentName:"li"},"Simple Equality Strategy"),": It uses a simple ",(0,i.kt)("a",{parentName:"li",href:"https://ugaya40.github.io/leseq/equality/"},"Equality Strategy"),"."),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udcaf ",(0,i.kt)("strong",{parentName:"li"},"All Typed"),": The whole thing is written in TypeScript, which also provides completion for type conversion between operators."),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udca8 ",(0,i.kt)("strong",{parentName:"li"},"No dependencies"))),(0,i.kt)("h1",{id:"resource"},"Resource"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"demostackblitz"},(0,i.kt)("a",{parentName:"h3",href:"https://stackblitz.com/edit/typescript-vygaa6?file=index.ts"},"Demo(StackBlitz)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"docs"},(0,i.kt)("a",{parentName:"h3",href:"https://ugaya40.github.io/leseq/"},"Docs")))),(0,i.kt)("h1",{id:"getting-started"},"Getting Started"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install leseq\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import {from, map, take, find} from 'leseq';\n\nconst result1 = from([1,2,3,4,5]).pipe(\n  map(i => i * i),\n  take(3)\n).toArray();\n\n//result1: [1,4,9]\n\nconst result2 = from([1,2,3,4,5]).pipe(\n  filter(i => i % 2 == 0)\n).value(\n  find(i => i > 2)\n);\n\n//result2: 4\n")),(0,i.kt)("p",null,"Here are the results of the Bundle Analyzer for the above example. You can see that only functions you are using are bundled.(seq.js is core object.)"),(0,i.kt)("img",{width:"500",src:"https://user-images.githubusercontent.com/1430166/155239748-9ff55488-93a6-4c4c-9131-c7f12e35cd6e.png"}),(0,i.kt)("h1",{id:"usage"},"Usage"),(0,i.kt)("p",null,"You can generate a sequence(Seq","<","T",">"," object) with ",(0,i.kt)("strong",{parentName:"p"},"Generator"),", perform transformations and other operations with any number of ",(0,i.kt)("strong",{parentName:"p"},"Operators"),", and convert it to a value with ",(0,i.kt)("strong",{parentName:"p"},"Value"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"Generators(ex: from, fromConcat, ..etc).pipe(\n  ...Operators(ex: map, filter, ...etc)\n).value(Values(ex: find,some, ...etc))\n")),(0,i.kt)("p",null,"Since lazy evaluation is employed, the process is not executed when ",(0,i.kt)("strong",{parentName:"p"},"pipe()")," is called, but only when ",(0,i.kt)("strong",{parentName:"p"},"value()"),", ",(0,i.kt)("strong",{parentName:"p"},"toArray()"),", or ",(0,i.kt)("strong",{parentName:"p"},"forEach()")," is called."),(0,i.kt)("p",null,"The predefined ",(0,i.kt)("strong",{parentName:"p"},"Generators/Operators/Values")," are as follows.\nIf the function you want to use does not exist, you can also define your own Operator/Value function ",(0,i.kt)("a",{parentName:"p",href:"https://ugaya40.github.io/leseq/create/"},"in this way"),"."),(0,i.kt)("h2",{id:"predefined-generators"},"Predefined Generators"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Generator"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/generators/#from"},"from")),(0,i.kt)("td",{parentName:"tr",align:null},"Generates a sequence from an iterable object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/generators/#fromconcat"},"fromConcat")),(0,i.kt)("td",{parentName:"tr",align:null},"Generates a concatenated sequence of multiple iterable objects.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/generators/#fromvalue"},"fromValue")),(0,i.kt)("td",{parentName:"tr",align:null},"Generates a sequence from a single value.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/generators/#range"},"range")),(0,i.kt)("td",{parentName:"tr",align:null},"Generates a sequential number sequence.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/generators/#repeat"},"repeat")),(0,i.kt)("td",{parentName:"tr",align:null},"Generates a sequence in which the specified value is repeated a specified number of times.")))),(0,i.kt)("h2",{id:"predefined-operators"},"Predefined Operators"),(0,i.kt)("p",null,"It is used within the pipe method of the Seq","<","T",">"," object. Any number of operators can be connected."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#chunk"},"chunk")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence divided into array of the specified size.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#concat"},"concat")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence in which the current sequence and the specified sequence are concatenated.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#concatvalue"},"concatValue")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the sequence to which the specified value is added.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#difference"},"difference")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the sequence that is the difference set between the current sequence and the specified sequence.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#filter"},"filter")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence that has been filtered by the specified condition.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#flatten"},"flatten")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a flattened sequence.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#groupby"},"groupBy")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence grouped by a specified key.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#intersect"},"intersect")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence that is the product set of the current sequence and the specified sequence.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#map"},"map")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the sequence in which each element has been transformed by the specified transformation function.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#orderby"},"orderBy")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence sorted by a specified key.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#reverse"},"reverse")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence in reverse order of the current sequence.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#scan"},"scan")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the resulting sequence after applying the aggregate function to the elements of the current sequence.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#skip"},"skip")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the sequence with the specified number of skips.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#skipwhile"},"skipWhile")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the sequence of elements skipped while matching the condition.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#take"},"take")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence that enumerates the specified number of items.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#takewhile"},"takeWhile")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence to be enumerated only while the condition is matched.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#tap"},"tap")),(0,i.kt)("td",{parentName:"tr",align:null},"Run side effects.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#union"},"union")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a sequence that is the union set of the current sequence and the specified sequence.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/operators/#uniq"},"uniq")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a deduplicated sequence.")))),(0,i.kt)("h2",{id:"predefined-values"},"Predefined Values"),(0,i.kt)("p",null,"Generates a value from a sequence. Used in the value method of the Seq","<","T",">"," object."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/values/#every"},"every")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns whether or not all elements of a sequence meet the specified conditions.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/values/#find"},"find")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the first element that satisfies the condition. If no element satisfying the condition is found, an error is thrown.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/values/#findordefault"},"findOrDefault")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the first element that satisfies the condition. If no element is found that satisfies the condition, it returns the specified default value.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/values/#reduce"},"reduce")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the result of applying the aggregate function to the elements of the current sequence.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ugaya40.github.io/leseq/api/values/#some"},"some")),(0,i.kt)("td",{parentName:"tr",align:null},"Returns whether or not any element of the sequence satisfies the specified condition.")))))}s.isMDXComponent=!0;var p=["components"],u={id:"overview",title:"Overview",sidebar_label:"Overview",sidebar_position:.5,custom_edit_url:null,hide_title:!0,slug:"/"},d=void 0,m={unversionedId:"overview",id:"overview",title:"Overview",description:"",source:"@site/docs/overview.mdx",sourceDirName:".",slug:"/",permalink:"/leseq/",editUrl:null,tags:[],version:"current",sidebarPosition:.5,frontMatter:{id:"overview",title:"Overview",sidebar_label:"Overview",sidebar_position:.5,custom_edit_url:null,hide_title:!0,slug:"/"},sidebar:"mainSidebar",next:{title:"Equality Strategy",permalink:"/leseq/equality"}},c=[],h={toc:c};function k(e){var t=e.components,a=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(s,{mdxType:"README"}))}k.isMDXComponent=!0}}]);