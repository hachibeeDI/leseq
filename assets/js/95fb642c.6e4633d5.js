"use strict";(self.webpackChunkleseq_docs=self.webpackChunkleseq_docs||[]).push([[18],{876:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=c(n),m=a,d=f["".concat(u,".").concat(m)]||f[m]||p[m]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},43:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return f}});var r=n(7896),a=n(1461),o=(n(2784),n(876)),i=["components"],l={id:"create",title:"Create Original Functions",sidebar_label:"Create Original Functions",sidebar_position:.5,custom_edit_url:null,hide_title:!0},u=void 0,c={unversionedId:"create",id:"create",title:"Create Original Functions",description:"Create Original Functions",source:"@site/docs/create.md",sourceDirName:".",slug:"/create",permalink:"/leseq/create",editUrl:null,tags:[],version:"current",sidebarPosition:.5,frontMatter:{id:"create",title:"Create Original Functions",sidebar_label:"Create Original Functions",sidebar_position:.5,custom_edit_url:null,hide_title:!0},sidebar:"mainSidebar",previous:{title:"Seq<T> Object",permalink:"/leseq/seq"},next:{title:"generators",permalink:"/leseq/api/generators/"}},s=[{value:"Create Original Functions",id:"create-original-functions",children:[{value:"Create Generator Functions",id:"create-generator-functions",children:[],level:3},{value:"Create Operator Functions",id:"create-operator-functions",children:[],level:3},{value:"Create Value Functions",id:"create-value-functions",children:[],level:3}],level:2}],p={toc:s};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"create-original-functions"},"Create Original Functions"),(0,o.kt)("h3",{id:"create-generator-functions"},"Create Generator Functions"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Generator")," returns a ",(0,o.kt)("a",{parentName:"p",href:"/seq/"},"Seq<T",">")," object."),(0,o.kt)("p",null,"The simplest ",(0,o.kt)("strong",{parentName:"p"},"Generator")," is ",(0,o.kt)("a",{parentName:"p",href:"/api/generators/#from"},"from"),". It is also very easy to reimplement."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"function fromOriginal<T>(source: Iterable<T>): Seq<T> {\n  return new Seq(source);\n}\n\nconst result = fromOriginal([1,2,3,4,5]).pipe(filter(i => i % 2 == 0)).toArray();\n\n//result: [2,4]\n")),(0,o.kt)("p",null,"The constructor of ",(0,o.kt)("a",{parentName:"p",href:"/seq/"},"Seq<T",">")," accepts an ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol"},"Iterable<T",">")," object. Therefore, such an implementation is also possible."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"function* rangeInternal(start: number, count: number): Gen<number> {\n  let currentCount = 0;\n  while (currentCount < count) {\n    yield start++;\n    currentCount++;\n  }\n}\n\nfunction rangeOriginal(start: number, count: number): Seq<number> {\n  return new Seq(rangeInternal(start, count));\n}\n\nconst result = rangeOriginal(1,10).pipe(filter(i => i % 2 == 0)).toArray();\n\n//result: [2,4,6,8,10]\n")),(0,o.kt)("p",null,"We used the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"function* declaration"),"."),(0,o.kt)("h3",{id:"create-operator-functions"},"Create Operator Functions"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Operator")," returns the ",(0,o.kt)("strong",{parentName:"p"},"Operator<T, TResult",">")," type function. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Operator<T, TResult",">")," is a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"function* declaration"),".  that takes the current sequence as an argument. ",(0,o.kt)("strong",{parentName:"p"},"T")," is the type of the elements of the current sequence, and ",(0,o.kt)("strong",{parentName:"p"},"TResult")," is the type returned by the yield of the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"function* declaration")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const mapOriginal = <T, TResult>(func: (arg: T, index: number) => TResult): Operator<T, TResult> =>\n  function* (source: Seq<T>): Gen<TResult> {\n    let count = 0;\n    for (const i of source) {\n      const result = func(i, count);\n      yield result;\n      count++;\n    }\n  };\n\nconst result = fromOriginal([1,2,3,4,5]).pipe(mapOriginal(i => i * i)).toArray();\n\n//result: [1,4,9,16,25]\n")),(0,o.kt)("h3",{id:"create-value-functions"},"Create Value Functions"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Value")," returns a function of type ",(0,o.kt)("strong",{parentName:"p"},"SeqToValue<T, TResult",">"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"SeqToValue<T, TResult",">")," takes the current sequence as an argument and returns an arbitrary value, where ",(0,o.kt)("strong",{parentName:"p"},"T")," is the type of the element in the current sequence and ",(0,o.kt)("strong",{parentName:"p"},"TResult")," is the type of the value to be returned."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const findOriginal =\n  <T>(predicate: (arg: T, index: number) => boolean = () => true): SeqToValue<T,T> =>\n  (seq: Seq<T>): T => {\n    let count = 0;\n    for (const i of seq) {\n      if (predicate(i, count)) {\n        return i;\n      }\n      count++;\n    }\n    throw RangeError(`No elements matching the condition were found.`);\n  };\n\nconst result = fromOriginal([1,2,3,4,5]).pipe(mapOriginal(i => i * i)).value(findOriginal(i => i > 10));\n\n//result: 16\n")))}f.isMDXComponent=!0}}]);